//–ë–ª–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø–∞–∫–µ—Ç–æ–≤ –∏ –º–æ–¥—É–ª–µ–π
    const TelegramBot = require('node-telegram-bot-api');//Lib for TG bot
    const axios = require('axios');// IO for API requests
    const openai = require('openai');//Lib openAI
    const cheerio = require('cheerio');//lib for analysis of HTML pages
    const winston = require('winston');//Lib for logs
    //const fetch = require('node-fetch');
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
//–ë–ª–æ–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ –¥–æ—Å—Ç—É–ø–æ–≤
    const { createLogger, format, transports } = winston;//logger #testa
    const { combine, timestamp, label, printf } = format;//logger
    const API_URL = 'https://api.openai.com/v1/engines/davinci/jobs';//url openai
    const API_KEY = '***********';//api openai
    const yaWeather = '***********';//–∫–ª—é—á –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞
    const yaMaps = '***********';//–∫–ª—é—á –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Ä–∞–Ω–¥–æ–º–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –¥–ª—è –≥–∏—Ç–∞ ‚Ññ1
    const token = '***********';//api telega
    const bot = new TelegramBot(token, {polling: true});
//–ë–ª–æ–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è —é–∑–µ—Ä–∫–µ–π—Å–æ–≤//–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞
    let latitude = 44.556972;
    let longitude = 33.526402;
    let cityName = '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å';
    let welcomeMessage = `–í–∞—à –≥–æ—Ä–æ–¥: ${cityName}, –µ—Å–ª–∏ –≤—ã –≤ –∏–Ω–æ–º –≥–æ—Ä–æ–¥–µ, –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥"`;
    let mainMessage = `–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ ${cityName}`;
    //–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logger = createLogger({
    level: 'info',
    format: combine(
        label({ label: 'telegram-bot' }),
        timestamp(),
        printf(info => {
            return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;
        })
    ),
    transports: [
        new transports.Console(),
        new transports.File({ filename: 'bot.log' })
    ]
});
const loggerFile = winston.createLogger({
    level: 'info',
    format: winston.format.json(),
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' })
    ]
});
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
//–°–∫—Ä–∏–ø—Ç—ã –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', query => {
    switch (query.data) {
        case 'mainMenu':
            bot.sendMessage(query.message.chat.id, `${mainMessage}`, {
                reply_markup: {
                    inline_keyboard: mainMenu
                }
            });
            break;
        case 'weather':
            bot.sendMessage(query.message.chat.id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã? ‚òÅüå°',{
                reply_markup:{
                    inline_keyboard: weather
                }
            });
            break;
/*default:bot.answerCallbackQuery(query.id, 'Unknown option', true);*/
    }
});
//–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, `${welcomeMessage}`, {
        reply_markup: {
            inline_keyboard: mainMenu
        }
    });
});
//–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏:
bot.on('callback_query', query => {
    console.log('chat_id:', query.message.chat.id);
    console.log('message_id:', query.message.message_id);
    bot.editMessageReplyMarkup({ inline_keyboard: []},{
        chat_id: query.message.chat.id,
        message_id: query.message.message_id
    });
});
//–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤
const mainMenu = [
    [{text: '–ü–æ–≥–æ–¥–∞', callback_data: 'weather'},{text: '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data: 'cityChange'}/*,{text: '–ê–≤—Ç–æ—Ç–µ—Å—Ç', callback_data: 'auto0'}*/]
];
const weather = [
    [{text: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è üîã', callback_data: 'forecast0'},{text: '–ù–∞ –∑–∞–≤—Ç—Ä–∞ üéà', callback_data: 'forecast1'}],
    [{text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'mainMenu'}]
];
//–ë–ª–æ–∫ —è–Ω–¥–µ–∫—Å –ø–æ–≥–æ–¥—ã
//–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
//–í—ã–≤–æ–¥ –≤ —á–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
bot.on('callback_query', (callbackQuery) => {
    const action = callbackQuery.data;
    const message = callbackQuery.message;
    const chatIdCC = callbackQuery.message.chat.id;
    const dataCC = callbackQuery.data;
    const lang = 'ru_RU';
    const url = `https://api.weather.yandex.ru/v2/informers?lat=${latitude}&lon=${longitude}&lang=${lang}`;
    const options = {
        method: 'GET',
        headers: { 'X-Yandex-API-Key': yaWeather }
    };

    switch (action) {
        case 'forecast0':
            fetch(url, options)
                .then(res => res.json())
                .then(data => {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –Ø–Ω–¥–µ–∫—Å –ü–æ–≥–æ–¥—ã
                    const obj = JSON.stringify(data);
                    const object = JSON.parse(obj);
                    const yaWeCondi = object.fact.condition; //–ö–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
                    logger.info('LOG DATA',data);
                    logger.info('LOG OBJ',obj);
                    logger.info('LOG OBJECT',object);
                    console.log(data);//—Ç–∞–∫ —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞–µ—Ç—Å—è —è –µ–±—É?
                    const pressMM = object.fact.pressure_mm;
                    const pressPA = object.fact.pressure_pa;
                    let emoji;
                    if (yaWeCondi === "clear") {
                        emoji = "‚òÄÔ∏è";
                    } else if (yaWeCondi === "partly-cloudy") {
                        emoji = "‚õÖÔ∏è";
                    } else if (yaWeCondi === "cloudy") {
                        emoji = "üå•Ô∏è";
                    } else if (yaWeCondi === "overcast") {
                        emoji = "‚òÅÔ∏è";
                    } else if (yaWeCondi === "drizzle") {
                        emoji = "üåßÔ∏è";
                    } else if (yaWeCondi === "light-rain") {
                        emoji = "üå¶Ô∏è";
                    } else if (yaWeCondi === "rain" || yaWeCondi === "moderate-rain" || yaWeCondi === "showers") {
                        emoji = "üåßÔ∏è";
                    } else if (yaWeCondi === "heavy-rain" || weather === "continuous-heavy-rain") {
                        emoji = "üí¶";
                    } else if (yaWeCondi === "wet-snow" || yaWeCondi === "light-snow" || yaWeCondi === "snow-showers" || yaWeCondi === "snow") {
                        emoji = "‚ùÑÔ∏è";
                    } else if (yaWeCondi === "hail" || yaWeCondi === "thunderstorm-with-hail") {
                        emoji = "üå©Ô∏è";
                    } else if (yaWeCondi === "thunderstorm" || yaWeCondi === "thunderstorm-with-rain") {
                        emoji = "‚õàÔ∏è";
                    }

                    const humidity = object.fact.humidity //–í–ª–∞–∂–Ω–æ—Å—Ç—å
                    const season = object.fact.season;
                    let seasonEmoji;
                    if (season === 'winter') {
                        seasonEmoji = '‚õÑ‚ùÑ';
                    } else if (season === 'autumn') {
                        seasonEmoji = 'üçÇüçÅ';
                    } else if (season === 'summer') {
                        seasonEmoji = 'üîÜ‚õ±';
                    } else if (season === 'spring') {
                        seasonEmoji = 'üå∫üå≥';
                    } else {
                        seasonEmoji = '';
                    }
                    const yaWeTemp = object.fact.temp; //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                    const yaWeTempFeels = object.fact.feels_like //–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
                    const yaWeTempOfWater = object.fact.temp_water // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
                    const message1 = yaWeTempOfWater ? `–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–í –≥–æ—Ä–æ–¥–µ ${cityName} –Ω–∞ —É–ª–∏—Ü–µ ${yaWeTemp}¬∞C${seasonEmoji}, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${yaWeTempFeels}¬∞C
–ù–∞ –Ω–µ–±–µ:${emoji} –í–ª–∞–∂–Ω–æ—Å—Ç—å:${humidity}% –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã:${yaWeTempOfWater}¬∞C` : `–í –≥–æ—Ä–æ–¥–µ ${cityName} –Ω–∞ —É–ª–∏—Ü–µ ${yaWeTemp}¬∞C${seasonEmoji}, 
–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${yaWeTempFeels}¬∞C\n–ù–∞ –Ω–µ–±–µ:${emoji} –í–ª–∞–∂–Ω–æ—Å—Ç—å:${humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: ${pressMM}–º–º–†—Ç–°—Ç/${pressPA}–ü–∞`;

                    bot.sendMessage(message.chat.id, message1,{
                        reply_markup: {
                            inline_keyboard: [[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainMenu'}]]
                        }
                    });
                }).catch(err => {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    console.error(err);
                });
            break;
        case 'forecast1':
            fetch(url, options)
                .then(res => res.json())
                .then(data => {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –Ø–Ω–¥–µ–∫—Å –ü–æ–≥–æ–¥—ã
                    const obj = JSON.stringify(data);
                    console.log(data);//—Ç–∞–∫ —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞–µ—Ç—Å—è —è –µ–±—É?
                    const object = JSON.parse(obj);
                    logger.info('LOG DATA',data);
                    logger.info('LOG OBJ',obj);
                    logger.info('LOG OBJECT',object);
                    const yaWeCondi1 = object.forecast.parts[0].condition; //–ö–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
                    const yaWeCondi2 = object.forecast.parts[1].condition;
                    const pressMM1 = object.forecast.parts[0].pressure_mm;
                    const pressMM2 = object.forecast.parts[1].pressure_mm;
                    const pressPA1 = object.forecast.parts[0].pressure_pa;
                    const pressPA2 = object.forecast.parts[1].pressure_pa;
                    let emoji1;
                    if (yaWeCondi1 === "clear") {
                        emoji1 = "‚òÄÔ∏è";
                    } else if (yaWeCondi1 === "partly-cloudy") {
                        emoji1 = "‚õÖÔ∏è";
                    } else if (yaWeCondi1 === "cloudy") {
                        emoji1 = "üå•Ô∏è";
                    } else if (yaWeCondi1 === "overcast") {
                        emoji1 = "‚òÅÔ∏è";
                    } else if (yaWeCondi1 === "drizzle") {
                        emoji1 = "üåßÔ∏è";
                    } else if (yaWeCondi1 === "light-rain") {
                        emoji1 = "üå¶Ô∏è";
                    } else if (yaWeCondi1 === "rain" || yaWeCondi1 === "moderate-rain" || yaWeCondi1 === "showers") {
                        emoji1 = "üåßÔ∏è";
                    } else if (yaWeCondi1 === "heavy-rain" || yaWeCondi1 === "continuous-heavy-rain") {
                        emoji1 = "üí¶";
                    } else if (yaWeCondi1 === "wet-snow" || yaWeCondi1 === "light-snow" || yaWeCondi1 === "snow-showers" || yaWeCondi1 === "snow") {
                        emoji1 = "‚ùÑÔ∏è";
                    } else if (yaWeCondi1 === "hail" || yaWeCondi1 === "thunderstorm-with-hail") {
                        emoji1 = "üå©Ô∏è";
                    } else if (yaWeCondi1 === "thunderstorm" || yaWeCondi1 === "thunderstorm-with-rain") {
                        emoji1 = "‚õàÔ∏è";
                    }

                    let emoji2;
                    if (yaWeCondi2 === "clear") {
                        emoji2 = "‚òÄÔ∏è";
                    } else if (yaWeCondi2 === "partly-cloudy") {
                        emoji2 = "‚õÖÔ∏è";
                    } else if (yaWeCondi2 === "cloudy") {
                        emoji2 = "üå•Ô∏è";
                    } else if (yaWeCondi2 === "overcast") {
                        emoji2 = "‚òÅÔ∏è";
                    } else if (yaWeCondi2 === "drizzle") {
                        emoji2 = "üåßÔ∏è";
                    } else if (yaWeCondi2 === "light-rain") {
                        emoji2 = "üå¶Ô∏è";
                    } else if (yaWeCondi2 === "rain" || yaWeCondi2 === "moderate-rain" || yaWeCondi2 === "showers") {
                        emoji2 = "üåßÔ∏è";
                    } else if (yaWeCondi2 === "heavy-rain" || yaWeCondi2 === "continuous-heavy-rain") {
                        emoji2 = "üí¶";
                    } else if (yaWeCondi2 === "wet-snow" || yaWeCondi2 === "light-snow" || yaWeCondi2 === "snow-showers" || yaWeCondi2 === "snow") {
                        emoji2 = "‚ùÑÔ∏è";
                    } else if (yaWeCondi2 === "hail" || yaWeCondi2 === "thunderstorm-with-hail") {
                        emoji2 = "üå©Ô∏è";
                    } else if (yaWeCondi2 === "thunderstorm" || yaWeCondi2 === "thunderstorm-with-rain") {
                        emoji2 = "‚õàÔ∏è";
                    }


                    const humidity1 = object.forecast.parts[0].humidity; //–í–ª–∞–∂–Ω–æ—Å—Ç—å —É—Ç—Ä–æ
                    const humidity2 = object.forecast.parts[1].humidity; //–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–µ—á–µ—Ä
                    const season = object.fact.season;
                    let seasonEmoji;
                    if (season === 'winter') {
                        seasonEmoji = '‚õÑ‚ùÑ';
                    } else if (season === 'autumn') {
                        seasonEmoji = 'üçÇüçÅ';
                    } else if (season === 'summer') {
                        seasonEmoji = 'üîÜ‚õ±';
                    } else if (season === 'spring') {
                        seasonEmoji = 'üå∫üå≥';
                    } else {
                        seasonEmoji = '';
                    }
                    const yaWeTemp1 = object.forecast.parts[0].temp_avg; //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Ç—Ä–æ
                    const yaWeTemp2= object.forecast.parts[1].temp_avg; //—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—á–µ—Ä
                    const yaWeTempFeels1 = object.forecast.parts[0].feels_like; //–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ —É—Ç—Ä–æ
                    const yaWeTempFeels2 = object.forecast.parts[1].feels_like; //–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ –≤–µ—á–µ—Ä
                    const yaWeTempOfWater1 = object.forecast.parts[0].temp_water; // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É—Ç—Ä–æ
                    const yaWeTempOfWater2 = object.forecast.parts[1].temp_water; // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤–µ—á–µ—Ä
                    const message2 = yaWeTempOfWater1 && yaWeTempOfWater2 ? `–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è+:\n–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É—Ç—Ä–æ–º:${pressMM1}–º–º–†—Ç–°—Ç/${pressPA1}–ü–∞\n–í–µ—á–µ—Ä–æ–º:${pressMM2}–º–º–†—Ç–°—Ç/${pressPA2}–ü–∞\n
                    –í –≥–æ—Ä–æ–¥–µ ${cityName} –Ω–∞ —É–ª–∏—Ü–µ${seasonEmoji}\n—É—Ç—Ä–æ–º:${yaWeTemp1}¬∞C –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${emoji1}${yaWeTempFeels1}¬∞C\n–≤–µ—á–µ—Ä–æ–º:${yaWeTemp2}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${emoji2}${yaWeTempFeels2}¬∞C\n
                    –í–ª–∞–∂–Ω–æ—Å—Ç—å: —É—Ç—Ä–æ–º ${humidity1}% –≤–µ—á–µ—Ä–æ–º ${humidity2}%\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É—Ç—Ä–æ–º:${yaWeTempOfWater1}¬∞C –∏ –≤–µ—á–µ—Ä–æ–º:${yaWeTempOfWater2}¬∞C` : `–í –≥–æ—Ä–æ–¥–µ ${cityName} –Ω–∞ —É–ª–∏—Ü–µ${seasonEmoji}\n
                    —É—Ç—Ä–æ–º:${yaWeTemp1}¬∞C –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${emoji1}${yaWeTempFeels1}¬∞C\n–≤–µ—á–µ—Ä–æ–º:${yaWeTemp2}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${emoji2}${yaWeTempFeels2}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: —É—Ç—Ä–æ–º ${humidity1}% –≤–µ—á–µ—Ä–æ–º ${humidity2}%`;
                    bot.sendMessage(message.chat.id, message2,{
                        reply_markup: {
                            inline_keyboard: [[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainMenu'}]]
                        }
                }).catch(err => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                console.error(err);
            })});
            break;
            //–ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å - 1-7 –¥–Ω–µ–π

            //–ó–¥–µ—Å—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–æ–±–∞–≤–ª—è—Ç—å - 1-7 –¥–Ω–µ–π
        case 'cityChange':
            bot.sendMessage(chatIdCC, '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞:');
            bot.on('message', function handler(msg) {
                if (msg.chat.id === chatIdCC) {
                    cityName = msg.text;
                    const url= `https://geocode-maps.yandex.ru/1.x/?apikey=${yaMaps}&format=json&geocode=${encodeURIComponent(cityName)}`;
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            const point = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
                            [longitude, latitude] = point.split(' ').map(parseFloat);
                            bot.sendMessage(chatIdCC, `–í–∞—à –≥–æ—Ä–æ–¥:  ${cityName}`,{
                                reply_markup: {
                                    inline_keyboard: [[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainMenu'}]]
                                }
                            })
                            console.log(`–ì–æ—Ä–æ–¥:${cityName} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:—à–∏—Ä–æ—Ç–∞ = ${latitude} –¥–æ–ª–≥–æ—Ç–∞ = ${longitude}`);
                        })
                        .catch(err => {
                            console.error(err);
                            bot.sendMessage(chatIdCC, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞',{
                                reply_markup: {
                                    inline_keyboard: [[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainMenu'}]]
                                }
                            });
                        });
                }
            });
            bot.removeListeners('message');
            break;
}})


//–ë–ª–æ–∫ ChatGPT –æ—Ç openAI

//–ë–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ Playwright

// –ë–ª–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–µ–π—Ç–∞ text to emoji

//–ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
const monitorLiveStream = async () => {
    try {
        const response = await axios.get('https://lolesports.com/');
        const $ = cheerio.load(response.data);

        const liveStreamElement = $('.live-stream');
        if (liveStreamElement.length > 0) {
            // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            bot.sendMessage('YOUR_CHAT_ID', '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è Lolesports –∞–∫—Ç–∏–≤–Ω–∞!');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏:', error);
    }
};
